/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include <memory>

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
LuftikusAudioProcessorEditor::LuftikusAudioProcessorEditor (LuftikusAudioProcessor* ownerFilter, LuftikusAudioProcessor::GUIType type)
    : AudioProcessorEditor (ownerFilter),
	  Proc(ownerFilter),
	  guiType(type),
	  mastering("Mastering"),
	  analog("Analog"),
	  keepGain("Keep Gain"),
	  //showTooltips("Tooltips"),
	  masterVolLabel("MasterVol", "Trim"),
	  modalCallback(nullptr)
	  //showInfo(false)
{
	initGui();
}

LuftikusAudioProcessorEditor::~LuftikusAudioProcessorEditor()
{
	tooltips = nullptr;
	Proc->guiType = Proc->getTypeFromFile();
    setLookAndFeel(nullptr);
}

void LuftikusAudioProcessorEditor::resized()
{
	resizedGui();
}

//==============================================================================
void LuftikusAudioProcessorEditor::paint (Graphics& g)
{
	paintGui(g);
}

void LuftikusAudioProcessorEditor::timerCallback()
{
	timerCallbackGui();
}

void LuftikusAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
	for (int i=0; i<EqDsp::kShelfHi; ++i)
	{
		if (&guiSliders[i] == slider)
		{
			const float sv = (float) guiSliders[i].getValue();
			const float newValue = sv / 20.f + 0.5f;
			Proc->setParameterNotifyingHost(i, newValue);
			return;
		}
	}

	if (&guiSliders[EqDsp::kShelfHi] == slider)
	{
		const float newValue = (float) guiSliders[EqDsp::kShelfHi].getValue() / 10.f;
		Proc->setParameterNotifyingHost(EqDsp::kShelfHi, newValue);
	}
	else if (slider == &guiMasterVol)
	{
		const float newValue = Proc->getMasterVolume().plainToNormalized((float) guiMasterVol.getValue());
		Proc->setParameterNotifyingHost(LuftikusAudioProcessor::kMasterVol, newValue);
	}
}

void LuftikusAudioProcessorEditor::comboBoxChanged (ComboBox* comboBoxThatHasChanged)
{
	if (&type == comboBoxThatHasChanged)
	{
		const float newValue = (type.getSelectedId() - 1.f) / float(EqDsp::kNumHighSelves - 1.f);
		Proc->setParameterNotifyingHost(EqDsp::kNumTypes, newValue);
	}
}

void LuftikusAudioProcessorEditor::buttonClicked (Button* button)
{
	if (button == &mastering)
	{
		Proc->setParameterNotifyingHost(LuftikusAudioProcessor::kMastering, mastering.getToggleState() ? 1.f : 0.f);
		updateSliders();
	}
	else if (button == &analog)
	{
		Proc->setParameterNotifyingHost(LuftikusAudioProcessor::kAnalog, analog.getToggleState() ? 1.f : 0.f);
	}
	else if (button == &keepGain)
	{
		Proc->setParameterNotifyingHost(LuftikusAudioProcessor::kKeepGain, keepGain.getToggleState() ? 1.f : 0.f);		
	}
	else
	{
		for (int i=0; i<EqDsp::kNumHighSelves; ++i)
		{
			if (button == &types[i])
			{
				const float newValue = i / float(EqDsp::kNumHighSelves - 1.f);
				Proc->setParameterNotifyingHost(EqDsp::kNumTypes, newValue);		
				break;
			}
		}
	}
}

void LuftikusAudioProcessorEditor::mouseDown(const MouseEvent& e)
{
	juce::Rectangle<int> rect;

	rect = juce::Rectangle<int> (108, 156, 115, 40);

	if (rect.contains(e.getPosition()) && showTooltips == nullptr)
	{
		showTooltips = std::make_unique<PopupMenu>();
		showTooltips->addItem(1, "Show Tooltips", true, tooltips != nullptr);
		showTooltips->showMenuAsync(PopupMenu::Options(), modalCallback = new ModalCallback(this));
	}
}

String LuftikusAudioProcessorEditor::getTooltip()
{
	const juce::Rectangle<int> rect(108, 156, 115, 40);

	if (rect.contains(getMouseXYRelative()))
		return "Click here to toggle tooltips";
	
	return "";
}

void LuftikusAudioProcessorEditor::modalReturn(int returnValue)
{
	if (returnValue == 1)
	{
		if (tooltips == nullptr)
			tooltips = std::make_unique<TooltipWindow>();
		else
			tooltips = nullptr;

		Proc->showTooltips = tooltips != nullptr;
	}

	showTooltips = nullptr;
}

void LuftikusAudioProcessorEditor::initGui()
{
	for (int i=0; i<EqDsp::kNumTypes; ++i)
	{
		addAndMakeVisible(&guiSliders[i]);
		addAndMakeVisible(&labels[i]);
		
		guiSliders[i].addListener(this);
		guiSliders[i].setTextBoxStyle(Slider::NoTextBox, false, 60, 20);
		guiSliders[i].setSliderStyle(Slider::RotaryVerticalDrag);
		labels[i].setText(Proc->getParameterName(i), dontSendNotification);
	}

	setLookAndFeel(&guiLookAndFeel);

	updateSliders();

	addAndMakeVisible(&mastering);
	mastering.addListener(this);
	addAndMakeVisible(&analog);
	analog.addListener(this);
	addAndMakeVisible(&keepGain);
	keepGain.addListener(this);

	for (int i=0; i<EqDsp::kNumHighSelves; ++i)
	{
		addAndMakeVisible(&types[i]);
		types[i].addListener(this);
		types[i].setRadioGroupId(674);
	}

	{
		types[0].setButtonText("");
		types[1].setButtonText("");
		types[2].setButtonText("");
		types[3].setButtonText("");
		types[4].setButtonText("");
		types[5].setButtonText("");
		mastering.setButtonText("");
		analog.setButtonText("");
		keepGain.setButtonText("");
	}

	{
		addAndMakeVisible(&guiMasterVol);
		guiMasterVol.addListener(this);
		guiMasterVol.setTextBoxStyle(Slider::NoTextBox, false, 50, 13);
		guiMasterVol.setSliderStyle(Slider::RotaryVerticalDrag);
		Range<float> volRange(Proc->getMasterVolume().getRangeDb());
		guiMasterVol.setRange(volRange.getStart(), volRange.getEnd(), 0.1);
	}

	{
		guiSliders[EqDsp::kBand10].setTooltip("Gain/cut 10 Hz band");
		guiSliders[EqDsp::kBand40].setTooltip("Gain/cut 40 Hz band");
		guiSliders[EqDsp::kBand160].setTooltip("Gain/cut 160 Hz band");
		guiSliders[EqDsp::kBand640].setTooltip("Gain/cut 640 Hz band");
		guiSliders[EqDsp::kShelf2k5].setTooltip("Gain/cut 2.5 kHz high shelf");
		guiSliders[EqDsp::kShelfHi].setTooltip("High shelf boost");

		guiMasterVol.setTooltip("Output volume trim (in dB)");

		types[0].setTooltip("High shelf boost off");
		types[1].setTooltip("High shelf boost @ 2.5 kHz");
		types[2].setTooltip("High shelf boost @ 5 kHz");
		types[3].setTooltip("High shelf boost @ 10 kHz");
		types[4].setTooltip("High shelf boost @ 20 kHz");
		types[5].setTooltip("High shelf boost @ 40 kHz");

		mastering.setTooltip("Enable mastering mode");
		analog.setTooltip("Enable analog emulation");
		keepGain.setTooltip("Avoid overall gain boosts/cuts when applying EQ gain");

		updateTooltipState();
	}

	background = ImageCache::getFromMemory(BinaryData::luftikus_front_002_png, BinaryData::luftikus_front_002_pngSize);

	setSize (720, 205);
	startTimer(100);
}

void LuftikusAudioProcessorEditor::resizedGui()
{
	for (int i=0; i<EqDsp::kNumHighSelves; ++i)
		types[i].setVisible(true);

	const int sw = 90;
	const int sh = sw + 24;

	const int ya = 67;
	const int yb = 95;
	const int yc = 176;

	guiSliders[EqDsp::kBand10].setBounds(67 - sw/2, yb - sw/2, sw, sh);
	guiSliders[EqDsp::kBand40].setBounds(167 - sw/2, ya - sw/2, sw, sh);
	guiSliders[EqDsp::kBand160].setBounds(267 - sw/2, yb - sw/2, sw, sh);
	guiSliders[EqDsp::kBand640].setBounds(367 - sw/2, ya - sw/2, sw, sh);
	guiSliders[EqDsp::kShelf2k5].setBounds(467 - sw/2, yb - sw/2, sw, sh);
	guiSliders[EqDsp::kShelfHi].setBounds(596 - sw/2, ya - sw/2, sw, sh);

	const int mh = 42;
	const int mw = mh + 55;
	guiMasterVol.setBounds(595 - mh/2, yc - mh/2, mw, mh);

	const int selX = 660;
	const int selW = 29;
	const int selH = 21;

	types[EqDsp::kHighOff].setBounds(selX, 24, selW, selH);
	types[EqDsp::kHigh2k5].setBounds(selX, 43, selW, selH);
	types[EqDsp::kHigh5k].setBounds(selX, 62, selW, selH);
	types[EqDsp::kHigh10k].setBounds(selX, 81, selW, selH);
	types[EqDsp::kHigh20k].setBounds(selX, 100, selW, selH);
	types[EqDsp::kHigh40k].setBounds(selX, 119, selW, selH);

	const int kw = 52;
	const int kh = 48;
	const int ky = 162;

	mastering.setBounds(242, ky, kw, kh);
	analog.setBounds(342, ky, kw, kh);
	keepGain.setBounds(442, ky, kw, kh);
}

void LuftikusAudioProcessorEditor::paintGui(Graphics& g)
{
    g.setColour (Colours::black);
	g.drawImageAt(background, 0, 0);
}

void LuftikusAudioProcessorEditor::updateSliders()
{
	updateSlidersGui();
}

void LuftikusAudioProcessorEditor::updateSlidersGui()
{
	if (mastering.getToggleState())
	{
		for (int i=0; i<EqDsp::kShelfHi; ++i)
		{
			const double sv = guiSliders[i].getValue();
			const double rounding = sv > 0 ? +0.5 : sv < 0 ? -0.5 : 0;
			guiSliders[i].setValue((double) int(sv+rounding), sendNotificationAsync);
			guiSliders[i].setRange(-10, 10, 1);
			guiSliders[i].setLabelText();
		}
		guiSliders[EqDsp::kShelfHi].setValue(0.5 * int(0.5 + 2*guiSliders[EqDsp::kShelfHi].getValue()), sendNotificationAsync);
		guiSliders[EqDsp::kShelfHi].setRange(0, 10, 0.5);
	}
	else
	{
		for (int i=0; i<EqDsp::kShelfHi; ++i)
		{
			guiSliders[i].setRange(-10, 10, 0.1);
			guiSliders[i].setLabelText();
		}

		guiSliders[EqDsp::kShelfHi].setRange(0, 10, 0.05);
	}
}

void LuftikusAudioProcessorEditor::timerCallbackGui()
{
	for (int i=0; i<EqDsp::kShelfHi; ++i)
	{
		const double newValue = Proc->getParameter(i)*20-10;
		const double sliderVal = guiSliders[i].getValue();

		if (fabs(sliderVal - newValue) > 0.05)
		{
			guiSliders[i].setValue(newValue, dontSendNotification);
			guiSliders[i].setLabelText();
		}
	}

	{
		const double newValue = Proc->getParameter(EqDsp::kShelfHi)*10;
		const double sliderVal = guiSliders[EqDsp::kShelfHi].getValue();

		if (fabs(sliderVal - newValue) > 0.025)
		{
			guiSliders[EqDsp::kShelfHi].setValue(newValue, dontSendNotification);
			guiSliders[EqDsp::kShelfHi].setLabelText();
		}
	}

	{
		const double newValue = Proc->getMasterVolume().getVolumeDb();

		if (fabs(guiMasterVol.getValue() - newValue) > 0.05)
		{
			guiMasterVol.setValue(newValue, dontSendNotification);
			guiMasterVol.setLabelText();
		}
	}

	{
		const float procVal = Proc->getParameter(EqDsp::kNumTypes);
		const int newType = int(procVal * (EqDsp::kNumHighSelves -1));		
		jassert(newType >=0 && newType < EqDsp::kNumHighSelves);

		int curType = -1;
		for (int i=0; i<EqDsp::kNumHighSelves; ++i)
			if (types[i].getToggleState())
				curType = i;

		if (curType != newType && newType >=0 && newType < EqDsp::kNumHighSelves)
		{
			types[newType].setToggleState(true, dontSendNotification);
		}
	}

	{
		const bool procAnalog = Proc->getParameter(LuftikusAudioProcessor::kAnalog) > 0.5f;
		const bool procMastering = Proc->getParameter(LuftikusAudioProcessor::kMastering) > 0.5f;
		const bool procKeepGain = Proc->getParameter(LuftikusAudioProcessor::kKeepGain) > 0.5f;

		if (procAnalog != analog.getToggleState())
			analog.setToggleState(procAnalog, dontSendNotification);

		if (procMastering != mastering.getToggleState())
		{
			mastering.setToggleState(procMastering, dontSendNotification);
			updateSliders();
		}

		if (procKeepGain != keepGain.getToggleState())
			keepGain.setToggleState(procKeepGain, dontSendNotification);
	}
}

void LuftikusAudioProcessorEditor::updateTooltipState()
{
	const bool curState = tooltips != nullptr;

	if (Proc->showTooltips != curState)
		tooltips = Proc->showTooltips ? std::make_unique<TooltipWindow>() : nullptr;
		
}
